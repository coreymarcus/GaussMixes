function [EMmodel] = EM(model,y, options)
%EM performs some simple expectation maximization

%extract local variables
k = model.k; %number of gaussians
mu_hat = model.mu; %means
var_hat = model.var; %variances
w_hat = model.w; %weights
N = length(y); %number of measurements
gamma = zeros(N,k); %prob that (row) measurement from (col) gaussian

% EM parameters
loopmax = options.loopmax;
tol = options.tol;

% compute the initial log liklihood
L = 0;
for ii = 1:N
    Liter = 0;
    for jj = 1:k
        Liter = Liter + w_hat*gaussEval(y(ii),mu_hat(
    end
    
end

%begin loop
looplogic = true;
loopcounter = 1;
while looplogic
    
    % E-step
    
    %cycle through measurements
    for ii = 1:N
        
        %cycle through gaussians
        for jj = 1:k
            gamma(ii,jj) = w_hat(jj,end)*gaussEval(y(ii),mu_hat(jj,end),var_hat(jj,end));
        end
        
        %normalize
        gamma(ii,:) = gamma(ii,:)/sum(gamma(ii,:));
    end
    
    %calculate n
    n = sum(gamma,1);
    
    % M-step
    w_hat = n/N;
    for ii = 1:k
        mu_hat(ii) = sum(gamma(:,ii).*y)/n(ii);
        var_hat(ii) = sum(gamma(:,ii).*(y - mu_hat(ii)).^2)/n(ii);
    end
    
    %loop management
    loopcounter = loopcounter + 1;
    if(loopcounter >= loopmax)
        looplogic = false;
    end
    
end

end

